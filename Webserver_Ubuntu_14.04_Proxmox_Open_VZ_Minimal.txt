UBUNTU 14.04 - PHP 5.5 - PROXMOX - OPEN VZ
: Pudin
: https://t.me/pudin_ira
: www.pdn.my.id

PERSIAPAN
-----------------------------------------------------------------------------------------------------------------------
# apt-get update
# apt update
# apt-get dist-upgrade
# apt install net-tools
# apt-get install systemd
# apt install mlocate
# apt-get install nano
# apt-get install zip
# apt-get install unzip

- mengganti waktu server localtime jakarta
# mv /etc/localtime /etc/localtime-asal
# cp /usr/share/zoneinfo/Asia/Jakarta /etc/localtime

- mengubah timezone asia-jakarta
# timedatectl set-timezone Asia/Jakarta 


1. ## APACHE
---------------------------------------------------------------------------------------------------------------------------
- Install Apache
# apt-get install apache2
- Test Apache
- Masuk ke browser dan panggil ip servernya

# nano /etc/apache2/httpd.conf

Masukan text dibawah ini
ServerName 127.0.0.1

USER GROUP
----------
sudo usermod -a -G namagrup namauser
sudo usermod -g namagrup namauser

2. ## PHP 5
--------------------------------------------------------------------------------------------
- Install PHP5
# apt install php5 libapache2-mod-php5 php5-mysql -y

- Backup konfigurasi asli
# cp /etc/php5/apache2/php.ini /etc/php5/apache2/ASLI-php.ini

- Edit konfigurasi PHP
# nano /etc/php5/apache2/php.ini
SESUAIKAN :
- max_execution_time = 60
- memory_limit = 2048M    // se per empat dari keseluruhan memory, memory yang saya gunakan di server ini 8192M
- date.timezone = "Asia/Jakarta"

Restart Apache
# service apache2 restart

3. ## MYSQL
-----------------------------------------------------------------------------------------------------------------------------
- Install Mysql
# apt-get install mysql-server -y

TEST
# mysql -u root -p
- Masukan Password

- Jika Errors where encountered while prosessing : mysql-server-5.5 mysql-server
- Jika Ingin menghapus mysql
# apt-get purge mysql*
# apt-get autoremove
# apt-get autoclean
- Install kembali

- Keamanan MySql
# mysql_secure_installation

- Lihat Versi MySql
# mysql -u root -p  //nanti akan diminta password root si mysql, masukan saja passwordnya
mysql> select version(); 


4. ## PHPMYADMIN
------------------------------------------------------------------------------------------------------------
KEBUTUHAN PHPMYADMIN
- php5-mbstring
- php5-zip
- php5-gd
- php5-json
- php5-curl

- Cara cek modul PHP yang terinstall
# php -m

yang kurang cuman ini.
# apt-get install php5-gd php5-curl -y


- Nonaktifkan komponen falidasi mysql // kayanya di ubuntu 14.04 tidak perlu
$ mysql -u root -p
mysql> UNINSTALL COMPONENT "file://component_validate_password";

INSTALL
# apt install phpmyadmin -y
- Configure database for phpmyadmin with dbconfig-common? yes

Mengaktifkan kembali komponen falidasi mysql // kayanya di ubuntu 14.04 tidak perlu
$ mysql -u root -p
mysql> INSTALL COMPONENT "file://component_validate_password";


5. ## ERROR MCRYPT
-----------------------------------------------------------------------------------------------------------------------------------
- Jika belum, Install MCRYPT
# apt-get install php5-mcrypt

- Install perintah locate // Abaikan jika sudah melakukanya di atas.
# apt install mlocate
# updatedb 
# locate mcrypt.ini
- Biasanya Tampil :  /etc/php5/mods-available/mcrypt.ini

# locate mcrypt.so
- Biasanya keluar
/usr/lib/libmcrypt.so.4
/usr/lib/libmcrypt.so.4.4.8
/usr/lib/php5/20121212/mcrypt.so

- Edit file mcrypt.ini dan ganti/tambah extension ke mcrypt.so,
- jadinya :
; configuration for php MCrypt module
; extension=mcrypt.so
extension=/usr/lib/php5/20121212/mcrypt.so

# php5enmod mcrypt

Create symbol links now
dari ke empat perintah symbolic link di bawah ini, bisa gunakan 2 saja, terserah mau yang atas atau bawah

# ls -al /etc/php5/cli/conf.d/20-mcrypt.ini
# ls -al /etc/php5/apache2/conf.d/20-mcrypt.ini

Create symbol links now

# ln -s /etc/php5/mods-available/mcrypt.ini /etc/php5/cli/conf.d/20-mcrypt.ini
# ln -s /etc/php5/mods-available/mcrypt.ini /etc/php5/apache2/conf.d/20-mcrypt.ini

Restart Apache

$> service apache2 restart

6. ## Mengamankan Instans phpMyAdmin Anda
# nano /etc/apache2/conf-available/phpmyadmin.conf
<Directory /usr/share/phpmyadmin>
	Options SymLinksIfOwnerMatch
	DirectoryIndex index.php
	AllowOverride All

Restart Apache
# service apache2 restart

Amankan lewat httaccess
# nano /usr/share/phpmyadmin/.htaccess

- Masukan :
AuthType Basic
AuthName "Restricted Files"
AuthUserFile /etc/phpmyadmin/.htpasswd
Require valid-user

Artinya :
- AuthType Basic : Baris ini menentukan jenis otentikasi yang Anda terapkan. Jenis ini akan
menerapkan otentikasi kata sandi menggunakan file kata sandi.
- AuthName : Ini menetapkan pesan untuk kotak dialog otentikasi. Anda harus menyimpan
generik ini sehingga pengguna yang tidak sah tidak akan mendapatkan informasi apa pun
tentang apa yang dilindungi.
- AuthUserFile : Ini menetapkan lokasi file kata sandi yang akan digunakan untuk otentikasi.
Ini harus berada di luar direktori yang sedang dilayani. Kami akan segera membuat file ini.
- Require valid-user : Ini menetapkan bahwa hanya pengguna yang diautentikasi yang harus
diberikan akses ke sumber daya ini. Inilah yang sebenarnya menghentikan pengguna yang
tidak sah untuk masuk.

Membuat username dan passord autentikasi
- Install htpasswd
# apt-get install apache2-utils
# htpasswd -c /etc/phpmyadmin/.htpasswd username // username terserah bisa diganti
- masukan 2x password autentikasi

-  jika ingin nambah username lagi
# htpasswd /etc/phpmyadmin/.htpasswd additionaluser

Restart Apache
# service apache2 restart


KEAMANAN WEBSERVER
--------------------------------------------------------------------------------------------------------------------------------------------------------------
1
=
Sembunyikan informasi mengenai server apache yang digunakan,
# nano /etc/apache2/conf-enabled/security.conf 
Ganti dari = ServerTokens OS 
Menjadi =  ServerTokens Prod.
‘Prod’ hanya menyediakan least information.
=========================================================

2
=
menyembunyikan informasi mengenai versi server yang digunakan dan lain-lain
# nano /etc/apache2/conf-enabled/security.conf 
‘ServerSignatures’ 
dari bernilai = ‘On’ 
menjadi = ‘Off’
=============================================================

3
=
Nonaktifkan autoindex, Metoda ini sering digunakan untuk XSS attack oleh hacker.
$nano /etc/apache2/conf-enabled/security.conf 

TraceEnable Off
=============================================================

4
=
Menonaktifkan info php
$ nano /etc/php5/apache2/php.ini

search:
Ctrl + W

disable_functions = phpinfo
====================================================================


5
=
- Anda dapat menginstall mod security dengan perintah berikut:
# apt-get install libapache2-mod-security2 -y

- Untuk mengecek apakah mod_security modul sudah berjalan, gunakan perintah berikut:

$ sudo apachectl -M | grep --color security2

security2_module (shared) // tandanya sudah aktif
# cp /etc/modsecurity/modsecurity.conf-recommended /etc/modsecurity/modsecurity.conf
# service apache2 reload

File konfigurasi ModSecurity default diatur ke DetectionOnly, yang mencatat permintaan sesuai dengan aturan yang cocok dan tidak memblokir apa pun. Ini dapat diubah dengan mengedit modsecurity.conffile dan memodifikasi SecRuleEnginedirektif. Jika Anda mencoba ini di server produksi, ubah arahan ini hanya setelah menguji semua aturan Anda.
# sed -i "s/SecRuleEngine DetectionOnly/SecRuleEngine On/" /etc/modsecurity/modsecurity.conf

The SecResponseBodyAccessmengkonfigurasi direktif apakah tubuh respon buffer (yaitu dibaca oleh ModSecurity). Ini hanya diperlukan jika deteksi dan perlindungan kebocoran data diperlukan. Oleh karena itu, membiarkannya aktif akan menghabiskan sumber daya Droplet dan juga meningkatkan ukuran file log, jadi kami akan mematikannya.
# sed -i "s/SecResponseBodyAccess On/SecResponseBodyAccess Off/" /etc/modsecurity/modsecurity.conf

Secara khusus, SecRequestBodyLimitdirektif menentukan ukuran data POST maksimum. Jika sesuatu yang lebih besar dikirim oleh klien, server akan merespons dengan kesalahan 413 Permintaan Entitas Terlalu Besar . Jika aplikasi web Anda tidak memiliki file yang diunggah, nilai ini dapat dibiarkan apa adanya. Nilai pra-konfigurasi yang ditentukan dalam file konfigurasi adalah 13107200 byte (12,5MB). Jika Anda ingin mengubah nilai ini, cari baris berikut modsecurity.conf:

Perubahan direktif "modsecurity.conf" opsional
# nano /etc/modsecurity/modsecurity.conf
- SecRequestBodyLimit 13107200
- SecRequestBodyLimit 131072  //Ubah aja jadi segini   

Arahan yang mempengaruhi kinerja server adalah SecRequestBodyInMemoryLimit. Arahan ini cukup jelas; itu menentukan berapa banyak data "badan permintaan" (data POSTed) harus disimpan dalam memori (RAM), apa pun lagi akan ditempatkan di hard disk (seperti bertukar). Karena Droplet menggunakan SSD, ini bukan masalah besar. Namun, ini dapat diubah jika Anda memiliki RAM cadangan. Nilai pra-konfigurasi untuk arahan ini adalah 128KB. Jika Anda ingin mengubah nilai ini, cari baris berikut modsecurity.conf:

Perubahan direktif "modsecurity.conf" opsional
# nano /etc/modsecurity/modsecurity.conf
- SecRequestBodyInMemoryLimit 131072

---- YANG INI DARI CATATAN LAMA - GAK SAYA PAKE
https://github.com/SpiderLabs/owasp-modsecurity-crs.git

IncludeOptional /usr/share/owasp-modsecurity-crs-3.2-dev/crs-setup.conf
IncludeOptional /usr/share/owasp-modsecurity-crs-3.2-dev/rules/*.conf

======================================

Mengaktifkan CRS
Untuk mempermudah, ada banyak aturan yang sudah diinstal bersama dengan ModSecurity. Ini disebut CRS (Core Rule Set) dan terletak di /usr/share/modsecurity-crs direktori. Untuk memuat aturan ini, kita perlu mengkonfigurasi Apache untuk membaca .conffile di direktori ini, jadi buka security2.conffile untuk diedit.

# nano /etc/apache2/mods-enabled/security2.conf

Tambahkan dua arahan berikut, disorot dengan warna merah, di dalam sebelum baris terakhir dalam file ( </IfModule>).

- Keamanan2.conf yang diperbarui
	IncludeOptional /etc/modsecurity/*.conf
	IncludeOptional "/usr/share/modsecurity-crs/*.conf"
	IncludeOptional "/usr/share/modsecurity-crs/activated_rules/*.conf"
</IfModule>


- Tidak termasuk Direktori/Domain (Opsional)
Terkadang masuk akal untuk mengecualikan direktori atau nama domain tertentu jika menjalankan aplikasi, seperti phpMyAdmin, karena ModSecurity akan memblokir kueri SQL. Juga lebih baik untuk mengecualikan backend admin dari aplikasi CMS seperti WordPress. Jika Anda mengikuti tutorial ini di server baru, Anda dapat melewati langkah ini.

Untuk menonaktifkan ModSecurity untuk VirtualHost lengkap, tempatkan arahan berikut di dalam <VirtualHost>[...]</VirtualHost>blok di file host virtualnya.

<IfModule security2_module>
	SecRuleEngine Off
</IfModule>

- Untuk menghilangkan direktori tertentu (misalnya, /var/www/wp-admin):

<Directory "/var/www/wp-admin">
    <IfModule security2_module>
	SecRuleEngine Off
    </IfModule>
</Directory>

- Jika Anda tidak ingin sepenuhnya menonaktifkan ModSecurity di direktori, gunakan SecRuleRemoveByIddirektif untuk menghapus aturan atau rantai aturan tertentu dengan menentukan ID-nya.

<LocationMatch "/wp-admin/update.php">
    <IfModule security2_module>
	SecRuleRemoveById 981173
    </IfModule>
</LocationMatch>



- Mengaktifkan Aturan Injeksi SQL
Selanjutnya, kita akan mengaktifkan file aturan injeksi SQL. File aturan yang diperlukan harus disinkronkan ke activated_rulesdirektori, yang mirip dengan mods-enableddirektori Apache . Ubah ke activated_rulesdirektori.

# cd /usr/share/modsecurity-crs/activated_rules/
 
Kemudian buat tautan simbolis dari modsecurity_crs_41_sql_injection_attacks.conffile.
# ln -s ../base_rules/modsecurity_crs_41_sql_injection_attacks.conf .
 
Terakhir, muat ulang Apache agar aturan diterapkan.
# service apache2 reload

- Jika halaman PHPMYADMIN tidak bisa di akses, seperti perintah di atas, kita memasukan perintah tambahan di virtualhost phpmyadmin
# nano /etc/apache2/conf-available/phpmyadmin.conf
- Tambahnakn secript di bawah ini, simpan di paling bawah

<IfModule security2_module>
	SecRuleEngine Off
</IfModule>

ini juga berlaku untuk semua file virtualhost di etc/apache/sit-available  yang butuh terhubung ke databasess


Sekarang buka halaman login yang kita buat sebelumnya dan coba gunakan query injeksi SQL yang sama pada kolom username. Karena kami mengubah SecRuleEnginedirektif ke Ondalam langkah 2, kesalahan 403 Forbidden ditampilkan. (Jika SecRuleEnginedibiarkan pada DetectionOnlyopsi, injeksi akan berhasil tetapi upaya akan dicatat dalam modsec_audit.logfile.)

Karena skrip login PHP ini hanya dimaksudkan untuk menguji ModSecurity, Anda harus menghapusnya sekarang setelah pengujian selesai.

sudo rm /var/www/html/login.php

=============================================
- Jika masih ingin di tambah lagi aturan nya
Menulis Aturan Anda Sendiri

Di bagian ini, kami akan membuat rantai aturan yang memblokir permintaan jika kata-kata tertentu yang biasanya dikaitkan dengan spam dimasukkan dalam bentuk HTML.

Pertama, kita akan membuat contoh skrip PHP yang mendapatkan input dari kotak teks dan menampilkannya kembali ke pengguna. Buka file yang dipanggil form.phpuntuk diedit.

sudo nano /var/www/html/form.php
 
Tempelkan kode berikut:

/var/www/html/form.php
<html>
    <body>
        <?php
            if(isset($_POST['data']))
                echo $_POST['data'];
            else
            {
        ?>
                <form method="post" action="">
                        Enter something here:<textarea name="data"></textarea>
                        <input type="submit"/>
                </form>
        <?php
            }
        ?>
    </body>
</html>
 
Aturan khusus dapat ditambahkan ke salah satu file konfigurasi atau ditempatkan di direktori ModSecurity. Kami akan menempatkan aturan kami di file baru yang terpisah bernama modsecurity_custom_rules.conf.

sudo nano /etc/modsecurity/modsecurity_custom_rules.conf
Rekatkan yang berikut ini di file ini. Dua kata yang kami blokir adalah blockword1 dan blockword2 .

modsecurity_custom_rules.conf
SecRule REQUEST_FILENAME "form.php" "id:'400001',chain,deny,log,msg:'Spam detected'"
SecRule REQUEST_METHOD "POST" chain
SecRule REQUEST_BODY "@rx (?i:(blockedword1|blockedword2))"
 
Sintaks untuk SecRuleadalah SecRule VARIABLES OPERATOR [ACTIONS]. Di sini kita menggunakan tindakan berantai untuk mencocokkan variabel REQUEST_FILENAMEdengan form.php, REQUEST_METHODdengan POST, dan REQUEST_BODYdengan (@rx)string ekspresi reguler (blockedword1|blockedword2). Melakukan ?i:pertandingan yang tidak peka huruf besar/kecil. Pada kecocokan yang sukses dari ketiga aturan ini, ACTIONadalah untuk menolak dan masuk dengan msg "Spam detected."Tindakan berantai mensimulasikan logika AND untuk mencocokkan ketiga aturan tersebut.

Simpan file dan muat ulang Apache.

sudo service apache2 reload
Buka di peramban. Jika memasukkan teks yang berisi kata-kata yang diblokir1 atau kata yang diblokir2, Anda akan melihat halaman 403.http://your_server_ip/form.php

Karena skrip formulir PHP ini hanya dimaksudkan untuk menguji ModSecurity, Anda harus menghapusnya sekarang setelah pengujian selesai.

sudo rm /var/www/html/form.php





## INSTALL FTP VSFTPD
------------------------------------------------------------------------------------------------------------------------------------------------------------------
# apt install vsftpd

- Backup konfigurasi Awal
# cp /etc/vsftpd.conf /etc/ASLI-vsftpd.conf

- Edit file vsftpd.conf
# nano /etc/vsftpd.conf
- #write_enable=YES
- Hilangkan Tanda Pagar
- Save

- Ubah Port Vsftpd
# Listen Port
listen_port=8021

- Restart
# service vsftpd restart


## GANTI PORT SSH
- Install
# apt-get install ssh

- Ganti Port
# cp /etc/ssh/sshd_config
# cp /etc/ssh/sshd_config /etc/ssh/ASLI-sshd_config     //BACKUP
# nano /etc/ssh/sshd_config
- Port : 22
- silahkan ganti

- Restart
# service ssh restart



## INSTALL FIREWALL UFW
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
- Install
# apt-get install ufw

- Mengaktifkan ufw
# ufw enable   // sebelum mengaktifkan ini, pastikan aturan aturan sudah di buat, jangan asal aktifkan saja.

- Melihat status firewall UFW
# sudo ufw status verbose

- Jika ingin mengaktifkan/menonaktifkan ip versi 6
- Backup dulu
# cp /etc/default/ufw /etc/default/ASLI-ufw
# nano /etc/default/ufw

- Mengatur semua koneksi dari luar itu di blok, dan semua koneksi ke luar di izinkan
# ufw default deny incoming
# ufw default allow outgoing

- Izinkan http dan https
# ufw allow http
# ufw allow https

- Tolak aksess http dan https
# ufw deny http
# ufw deny https

- izinkan by port
# ufw allow 80
# ufw allow 443
# ufw allow 21/tcp

- izinkan by rentang port 6000 sampai 6007
# ufw allow 6000:6007/tcp
# ufw allow 6000:6007/udp

- Izinkan alamat ip tertentu/ SUbnet tertentu
# ufw allow from 192.168.3.3
# ufw allow from 192.168.3.0/24

- Tolak aksess
# ufw deny from 192.168.3.3


- izinkan ip tertentu aksess port tertentu/ Subnet tertentu
# ufw allow from 192.168.3.3 to any port 21
# ufw allow from 192.168.3.0/24 to any port 21

- Menghapus aturan
# ufw status numbered
- akan tampil seperti dibawah ini
Status: active

     To                         Action      From
     --                         ------      ----
[ 1] 22                         ALLOW IN    15.15.15.0/24
[ 2] 80                         ALLOW IN    Anywhere

- hapus
# ufw delete 2    // Hapus aturan nomor 2 yaitu port 80

- atau dengan cara
# ufw delete allow 80

- Menonaktifkan UFW
# ufw disable

- Mereset semua konfigurasi UFW
# ufw reset
